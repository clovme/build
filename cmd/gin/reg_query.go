package gin

import (
	"buildx/global"
	"buildx/libs"
	"fmt"
	"os"
	"path/filepath"
	"text/template"
)

const gormGenTpl = `// Code generated by {{ .ExeName }} tool. DO NOT EDIT.
// Code generated by {{ .ExeName }} tool. DO NOT EDIT.
// Code generated by {{ .ExeName }} tool. DO NOT EDIT.

package test

import (
{{- range .PAS }}
	"{{ .ProjectName }}/internal/domain/{{ .PackagePath }}"
{{- end }}
	"gorm.io/gen"
	"testing"
)

func TestGenQuery(t *testing.T) {
	g := gen.NewGenerator(gen.Config{
		OutPath: "../internal/infrastructure/query",
		Mode:    gen.WithoutContext | gen.WithDefaultQuery,
	})

	g.ApplyBasic(
{{- range .PAS }}
		{{ .PackageName }}.{{ .StructName }}{},
{{- end }}
	)

	g.Execute()
}`

var count = 0

func remove(path string) {
	if count > 5 {
		return
	}
	if libs.IsFileExist(path) {
		if os.Remove(path) != nil {
			count++
			remove(path)
		}

		files, err := os.ReadDir(filepath.Dir(path))
		if err != nil {
			return
		}
		if len(files) == 0 {
			_ = os.RemoveAll(filepath.Dir(path))
		}
	}
}

func regQuery() {
	path := "test/gen_query_test.go"

	defer remove(path)

	if !libs.IsDirExist(filepath.Dir(path)) {
		_ = os.MkdirAll(filepath.Dir(path), os.ModePerm)
	}

	// 创建一个新的模板，解析并执行模板
	tmpl, _ := template.New("gorm_gen").Parse(gormGenTpl)

	// 输出解析结果，可以写入文件
	file, _ := os.Create(path)
	defer file.Close()

	projectName := libs.GetModuleName()
	dbData := dbAutoMigrateData{
		ExeName:     global.ExeFileName,
		ProjectName: projectName,
		PAS:         getPackageAndStructName("发现gorm模型: ", projectName),
	}

	// 执行模板，填充数据，并写入文件
	_ = tmpl.Execute(file, dbData)
	fmt.Println("生成DAO的执行文件已生成:", path)

	_ = os.RemoveAll("internal/infrastructure/query")
	libs.Command("go", "test", "-v", "./test", "-run", "^TestGenQuery$")

	fmt.Println("DAO层已生成，internal/infrastructure/query")
}
