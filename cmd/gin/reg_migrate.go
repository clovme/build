package gin

import (
	"buildx/global"
	"buildx/libs"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const dbAutoMigrate = `// Code generated by {{ .ExeName }} tool. DO NOT EDIT.
// Code generated by {{ .ExeName }} tool. DO NOT EDIT.
// Code generated by {{ .ExeName }} tool. DO NOT EDIT.

package database

import (
	"{{ .ProjectName }}/internal/bootstrap/database/initdata"
{{- range .PAS }}
	"{{ .ProjectName }}/internal/domain/{{ .PackagePath }}"
{{- end }}
	"{{ .ProjectName }}/internal/infrastructure/query"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"reflect"
)

func AutoMigrate(db *gorm.DB, dbq *query.Query, router gin.RoutesInfo) error {
	err := db.AutoMigrate(
{{- range .PAS }}
		&{{ .PackageName }}.{{ .StructName }}{},
{{- end }}
	)

	if err != nil {
		return err
	}
	
	v := reflect.ValueOf(&initdata.InitData{Router: router, Q: query.Q})
	for i := 0; i < v.NumMethod(); i++ {
		v.Method(i).Call(nil)
	}
	return nil
}`

type packageAndStructName struct {
	PackagePath string
	PackageName string
	StructName  string
	ProjectName string
}

type dbAutoMigrateData struct {
	ExeName     string
	ProjectName string
	PAS         []packageAndStructName
}

func getPackageAndStructName(msg, projectName string) []packageAndStructName {
	rootPath := "internal/domain"
	if !libs.IsDirExist(rootPath) {
		fmt.Printf("读取的目录不存在，请先使用 %s gin new project 创建项目\n", global.ExeFileName)
		return nil
	}

	pass := make([]packageAndStructName, 0)
	_ = filepath.Walk(rootPath, func(path string, file os.FileInfo, err error) error {
		if file.IsDir() || file.Name() != "entity.go" {
			return nil
		}

		pkgPath := strings.Replace(path[len(rootPath)+1:len(path)-10], "\\", "/", -1)
		_, domainName, _ := libs.DomainStructOrPath(pkgPath)

		pass = append(pass, packageAndStructName{
			PackagePath: pkgPath,
			PackageName: filepath.Base(pkgPath),
			ProjectName: projectName,
			StructName:  domainName,
		})
		fmt.Printf("%s%s.%s{}\n", msg, file.Name(), domainName)
		return nil
	})
	return pass
}

func regMigrate() {
	path := "internal/bootstrap/database/migrate.go"

	if !libs.IsDirExist(filepath.Dir(path)) {
		_ = os.MkdirAll(filepath.Dir(path), os.ModePerm)
	}

	// 创建一个新的模板，解析并执行模板
	tmpl, _ := template.New("migrate").Parse(dbAutoMigrate)

	projectName := libs.GetModuleName()
	dbData := dbAutoMigrateData{
		ExeName:     global.ExeFileName,
		ProjectName: projectName,
		PAS:         getPackageAndStructName("发现迁移模型: &", projectName),
	}
	// 输出解析结果，可以写入文件
	file, _ := os.Create(path)
	defer file.Close()
	// 执行模板，填充数据，并写入文件
	_ = tmpl.Execute(file, dbData)
	fmt.Println("迁移文件已生成:", path)
}
